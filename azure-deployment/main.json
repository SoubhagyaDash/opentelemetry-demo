{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "13505076617264879799"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources"
      }
    },
    "projectName": {
      "type": "string",
      "defaultValue": "otel-demo",
      "metadata": {
        "description": "The name prefix for all resources"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    },
    "aksClusterName": {
      "type": "string",
      "defaultValue": "[format('{0}-aks-{1}', parameters('projectName'), parameters('environment'))]",
      "metadata": {
        "description": "AKS cluster name"
      }
    },
    "nodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3",
      "metadata": {
        "description": "Node pool VM size"
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Initial node count"
      }
    },
    "enableAzureMonitor": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Monitor for containers"
      }
    },
    "enableKeyVault": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Key Vault integration"
      }
    },
    "enableAcr": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Container Registry"
      }
    },
    "enableEventHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure EventHub"
      }
    },
    "eventHubSku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "EventHub SKU (Basic, Standard, Premium)"
      }
    },
    "eventHubThroughputUnits": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "EventHub throughput units (1-20 for Standard, 1-100 for Premium)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Environment": "[parameters('environment')]",
        "Project": "[parameters('projectName')]",
        "Application": "OpenTelemetry-Demo"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "acrName": "[format('oteldemo{0}acr', variables('uniqueSuffix'))]",
    "keyVaultName": "[format('{0}-kv-{1}', parameters('projectName'), variables('uniqueSuffix'))]",
    "logAnalyticsName": "[format('{0}-logs-{1}', parameters('projectName'), parameters('environment'))]",
    "appInsightsName": "[format('{0}-insights-{1}', parameters('projectName'), parameters('environment'))]",
    "vnetName": "[format('{0}-vnet-{1}', parameters('projectName'), parameters('environment'))]",
    "subnetName": "aks-subnet",
    "managedIdentityName": "[format('{0}-identity-{1}', parameters('projectName'), parameters('environment'))]",
    "eventHubNamespaceName": "[format('{0}-eventhub-{1}-{2}', parameters('projectName'), parameters('environment'), variables('uniqueSuffix'))]",
    "eventHubName": "otel-events"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-05-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/22"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[parameters('enableAcr')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": false
      }
    },
    {
      "condition": "[parameters('enableAcr')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), 'AcrPull')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2024-01-01",
      "name": "[variables('eventHubNamespaceName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('eventHubSku')]",
        "tier": "[parameters('eventHubSku')]",
        "capacity": "[parameters('eventHubThroughputUnits')]"
      },
      "properties": {
        "minimumTlsVersion": "1.2",
        "publicNetworkAccess": "Enabled",
        "disableLocalAuth": false,
        "zoneRedundant": false,
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": true
      }
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2024-01-01",
      "name": "[format('{0}/{1}', variables('eventHubNamespaceName'), variables('eventHubName'))]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 2,
        "status": "Active"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.EventHub/namespaces/authorizationRules",
      "apiVersion": "2024-01-01",
      "name": "[format('{0}/{1}', variables('eventHubNamespaceName'), 'OtelDemoAccessPolicy')]",
      "properties": {
        "rights": [
          "Listen",
          "Send",
          "Manage"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2024-01-01",
      "name": "[format('{0}/{1}/{2}', variables('eventHubNamespaceName'), variables('eventHubName'), 'accounting')]",
      "properties": {
        "userMetadata": "Consumer group for accounting service"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2024-01-01",
      "name": "[format('{0}/{1}/{2}', variables('eventHubNamespaceName'), variables('eventHubName'), 'fraud-detection')]",
      "properties": {
        "userMetadata": "Consumer group for fraud detection service"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHub')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.EventHub/namespaces/{0}', variables('eventHubNamespaceName'))]",
      "name": "[guid(resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), 'EventHubDataOwner')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[parameters('enableKeyVault')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableRbacAuthorization": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableKeyVault'), parameters('enableEventHub'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'EventHubConnectionString')]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubNamespaceName'), 'OtelDemoAccessPolicy'), '2024-01-01').primaryConnectionString]",
        "contentType": "Connection String",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubNamespaceName'), 'OtelDemoAccessPolicy')]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2024-02-01",
      "name": "[parameters('aksClusterName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "dnsPrefix": "[format('{0}-{1}', parameters('projectName'), parameters('environment'))]",
        "agentPoolProfiles": [
          {
            "name": "default",
            "count": "[parameters('nodeCount')]",
            "vmSize": "[parameters('nodeVmSize')]",
            "osType": "Linux",
            "osDiskSizeGB": 100,
            "type": "VirtualMachineScaleSets",
            "mode": "System",
            "vnetSubnetID": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[0].id]",
            "maxPods": 110
          }
        ],
        "servicePrincipalProfile": {
          "clientId": "msi"
        },
        "nodeResourceGroup": "[format('{0}-aks-nodes', resourceGroup().name)]",
        "enableRBAC": true,
        "networkProfile": {
          "networkPlugin": "azure",
          "networkPolicy": "azure",
          "serviceCidr": "10.2.0.0/16",
          "dnsServiceIP": "10.2.0.10"
        },
        "addonProfiles": "[if(parameters('enableAzureMonitor'), createObject('omsagent', createObject('enabled', true(), 'config', createObject('logAnalyticsWorkspaceResourceID', resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')))), 'azureKeyvaultSecretsProvider', if(parameters('enableKeyVault'), createObject('enabled', true()), createObject('enabled', false()))), createObject())]",
        "autoUpgradeProfile": {
          "upgradeChannel": "patch"
        },
        "disableLocalAccounts": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    }
  ],
  "outputs": {
    "aksClusterName": {
      "type": "string",
      "value": "[parameters('aksClusterName')]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').clientId]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
    },
    "eventHubNamespaceName": {
      "type": "string",
      "value": "[if(and(parameters('enableEventHub'), not(equals(reference(resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName')), '2024-01-01', 'full'), null()))), variables('eventHubNamespaceName'), '')]"
    },
    "eventHubName": {
      "type": "string",
      "value": "[if(and(parameters('enableEventHub'), not(equals(reference(resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName')), '2024-01-01', 'full'), null()))), variables('eventHubName'), '')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "value": "[parameters('location')]"
    }
  }
}